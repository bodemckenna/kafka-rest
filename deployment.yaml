apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: test-cp-kafka-rest
  labels:
    app: cp-kafka-rest
    chart: cp-kafka-rest-0.1.0
    release: test
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-kafka-rest
      release: test
  template:
    metadata:
      labels:
        app: cp-kafka-rest
        release: test
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
        - name: prometheus-jmx-exporter
          image: "solsson/kafka-prometheus-jmx-exporter@sha256:a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - "5556"
          - /etc/jmx-kafka-rest/jmx-kafka-rest-prometheus.yml
          ports:
          - containerPort: 5556
          resources:
            null

          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-kafka-rest
      containers:
        - name: cp-kafka-rest-server
          image: "confluentinc/cp-kafka-rest:4.0.1"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: rest-proxy
              containerPort: 8082
              protocol: TCP
            - containerPort: 5555
              name: jmx
          resources:
            {}
            
          env:
          - name: KAFKA_REST_HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: KAFKA_REST_ZOOKEEPER_CONNECT
            value: eric-data-coordinator-zk:2181/eric-data-message-bus-kf
          - name: KAFKA_REST_SCHEMA_REGISTRY_URL
            value: http://schemaregistry:8081
          - name: KAFKA_REST_JMX_PORT
            value: "5555"
